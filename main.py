# –ó–∞–¥–∞—á–∞ ‚Ññ9. –†–µ—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
# –ü–æ –¥–∞–Ω–Ω–æ–º—É —Ü–µ–ª–æ–º—É –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É n –≤—ã—á–∏—Å–ª–∏—Ç–µ
# –∑–Ω–∞—á–µ–Ω–∏–µ n!. N! = 1 * 2 * 3 * ‚Ä¶ * N (–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö
# —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ N) 0! = 1 –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª
# while
# Input: 5
# Output: 120

# n = int(input())

# fact = 1
# count = 0
# while count < n:
#     count += 1
#     fact *=count
# print(fact)



# –ó–∞–¥–∞—á–∞ ‚Ññ11. –†–µ—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
# –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ A > 1. –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫–∏–º –ø–æ
# —Å—á–µ—Ç—É —á–∏—Å–ª–æ–º –§–∏–±–æ–Ω–∞—á—á–∏ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è, —Ç–æ –µ—Å—Ç—å
# –≤—ã–≤–µ–¥–∏—Ç–µ —Ç–∞–∫–æ–µ —á–∏—Å–ª–æ n, —á—Ç–æ œÜ(n)=A. –ï—Å–ª–∏ –ê –Ω–µ
# —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –§–∏–±–æ–Ω–∞—á—á–∏, –≤—ã–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ -1.
# Input: 5
# Output: 6

# n = int(input())

# n0 = 0
# n1 = 0
# n2 = 1
# i = 2

# while n0 < n:
#     n0 = n1 + n2
#     n1 = n2
#     n2 = n0
#     i += 1
#     if n0 > n:
#         i = -1

# print(i)


# –û—Ä–µ–ª –∏ —Ä–µ—à–∫–∞

# –î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ "–û" –∏ "–†". –ë—É–∫–≤–∞ "–û" ‚Äì —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—é –û—Ä–ª–∞, –∞ –±—É–∫–≤–∞ "–†" ‚Äì —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–ø–∞–¥–µ–Ω–∏—é –†–µ—à–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫.

# –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –±—É–∫–≤ —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ "–û" –∏ "–†".

# –§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
# –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ä—è–¥ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫.

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã–ø–∞–≤—à–∏—Ö –†–µ—à–µ–∫ –Ω–µ—Ç, —Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ
# 0
# 0.

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
# Sample Input 1:
# –û–†–†–û–†–û–†–û–û–†–†–†–û
# Sample Output 1:
# 3
# Sample Input 2:
# –û–û–û–û–û–û–†–†–†–û–†–û–†–†–†–†–†–†–†
# Sample Output 2:
# 7
# Sample Input 3:
# –û–û–û–û–†–†–†–†–û–†–û–†–†–†–†–†–†–†–†–û–û–†–û–†–û–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†
# Sample Output 3:
# 31

# n = '–û–û–û–û–†–†–†–†–û–†–û–†–†–†–†–†–†–†–†–û–û–†–û–†–û–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†–†'
# o = 0
# om = 0
# p = 0
# pm = 0
# for i in n:
#     if i == '–û':
#         o += 1
#         om = o
#         p = 0
#     elif i == '–†':
#         p += 1
#         pm = p
#         o = 0

# print(pm)


# o = 0
# r = 0
# for element in n:
#     if element == 0:
#         o += 1
#     elif element == 1:
#         r += 1

# print(max(o,r))




# c = [0, 1, 0, 1, 1, 1, 1, 0, 0]
# o = 0
# r = 0
# for element in c:
#     if element == 0:
#         o += 1
#     elif element == 1:
#         r += 1

# print(min(o,r))


# –ü–µ—Ç—è –∏ –ö–∞—Ç—è ‚Äì –±—Ä–∞—Ç –∏ —Å–µ—Å—Ç—Ä–∞. –ü–µ—Ç—è ‚Äì —Å—Ç—É–¥–µ–Ω—Ç, –∞ –ö–∞—Ç—è ‚Äì —à–∫–æ–ª—å–Ω–∏—Ü–∞. –ü–µ—Ç—è –ø–æ–º–æ–≥–∞–µ—Ç –ö–∞—Ç–µ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ.
# –û–Ω –∑–∞–¥—É–º—ã–≤–∞–µ—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ X –∏ Y (X,Y‚â§1000), –∞ –ö–∞—Ç—è –¥–æ–ª–∂–Ω–∞ –∏—Ö –æ—Ç–≥–∞–¥–∞—Ç—å. –î–ª—è —ç—Ç–æ–≥–æ –ü–µ—Ç—è –¥–µ–ª–∞–µ—Ç –¥–≤–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏. –û–Ω –Ω–∞–∑—ã–≤–∞–µ—Ç —Å—É–º–º—É —ç—Ç–∏—Ö —á–∏—Å–µ–ª S –∏ –∏—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ P. –ü–æ–º–æ–≥–∏—Ç–µ –ö–∞—Ç–µ –æ—Ç–≥–∞–¥–∞—Ç—å –∑–∞–¥—É–º–∞–Ω–Ω—ã–µ –ü–µ—Ç–µ–π —á–∏—Å–ª–∞.
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —á–∏—Å–ª–∞ S –∏ P –∑–∞–¥–∞–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ —Ç–µ—Å—Ç–∞—Ö. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤—ã –¥–æ–ª–∂–Ω—ã –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã —á–∏—Å–µ–ª X –∏ Y —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —Ç–∞–∫–∏–µ —á—Ç–æ X <= Y.
# # s = int(input())

# # p = int(input())

# c = 0
# for x in range(s + p):
#     if c:
#         break
#     for y in range(s + p):
#         if x + y == s and x * y == p:
#             c = 1
#             print(*sorted([x, y]))
#             break



# # n=16
# for i in range(int(numberN)+1):
#     exp = << i
#      if exp <= numberN:
#             print(power)





# n=[1,2,3,4,5]

# i = int(input("–í–≤–µ–¥–∏—Ç–µ i:"))
# i= i%len(n)
# for i in range(i):
#     t=n.pop()
#     n.insert(0,t)
# print(n)


# –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ k –≤ –º–∞—Å—Å–∏–≤–µ list_1.

# list_1 = [1, 2, 3, 4, 5]
# k = 3
# if "k" in list_1:
#     list_1.remove("k")
# print(list_1)


# list_1 = [1, 2, 3, 4, 5]
# k = 3
# count_k = list_1.count(k)
# print(count_k)

# def find_nearest_digit(number, digits):
#     return min(digits, key=lambda x: (abs(x - number), x))

# list_1 = [1, 2, 3, 4, 5]
# k = 6
# closest_digit = find_nearest_digit(k, list_1)
# print(closest_digit)

# 5

# def find_nearest_digit(number, digits):
#     """
#     –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–∏—Ñ—Ä—É, –±–ª–∏–∂–∞–π—à—É—é –∫ –∑–∞–¥–∞–Ω–Ω–æ–º—É —á–∏—Å–ª—É number —Å—Ä–µ–¥–∏ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤ —Å–ø–∏—Å–∫–µ digits.

#     :param number: –ß–∏—Å–ª–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ü–∏—Ñ—Ä—É.
#     :param digits: –°–ø–∏—Å–æ–∫ —Ü–∏—Ñ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–π.
#     :return: –¶–∏—Ñ—Ä–∞, –±–ª–∏–∂–∞–π—à–∞—è –∫ number —Å—Ä–µ–¥–∏ digits.
#     """
#     return min(digits, key=lambda x: (x - number)  *  *  2)

# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:
# number = 50
# digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]
# closest_digit = find_nearest_digit(number, digits)
# print(f"–¶–∏—Ñ—Ä–∞, –±–ª–∏–∂–∞–π—à–∞—è –∫ {number}: {closest_digit}")


# ingl = {"A, E, I, O, U, L, N, S, T, R" : "1"}

# i = ingl.get('E')
# print(i)

# ingl = {"A, E, I, O, U, L, N, S, T, R" : "1", "D, G" : "2" , "B, C, M, P" : "3", "F, H, V, W, Y": "4", "K" : "5", "J, X" :"8", "Q, Z": "10" , "–ê, –í, –ï, –ò, –ù, –û, –†, –°, –¢" : "1", "–î, –ö, –õ, –ú, –ü, –£" : "2",
# "–ë, –ì, –Å, –¨, –Ø" : "3",
# "–ô, –´" : "4",
# "–ñ, –ó, –•, –¶, –ß" : "5" ,
# "–®, –≠, –Æ" : "8" ,
# "–§, –©, –™" : "10" }

# k = "ignore"
# word= k.upper()
# sum_of_numbers = 0

# for letter in word:
#     for keys, values in ingl.items():
#         if letter in keys:
#             sum_of_numbers += int(values)

# print(sum_of_numbers)


# –°–µ—Ä–≥–µ–π –°–µ—Ä–¥—é–∫ –ó–∞–¥–∞—á–∞ No25. –†–µ—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
# –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Å—Ç—Ä–æ–∫—É, –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∫–∞–∂–¥—ã–∏ÃÜ —Å–∏–º–≤–æ–ª —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª—Å—è. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å–∏–º–≤–æ–ª–∞–º —Å –ø–æ–º–æ—â—å—é –ø–æ—Å—Ç—Ñ–∏–∫—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∞ _n.
# Input: a a a b c a a d c d d
# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2
# –î–ª—è —Ä–µ—à–µ–Ω–∏—è –¥–∞–Ω–Ω–æ–∏ÃÜ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–∏ÃÜ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é .split()
# 15 –º–∏–Ω—É—Ç

# dict = {}
# string = "a a a b c a a d c d d"
# string_res = ""

# for i in string.split():
#     if i in dict:
#         string_res = string_res + i + "_" + str(dict[i]) + " "
#     else:
#         string_res = string_res + i + " "
#     dict[i] = 1 + dict.get(i, 0)
# print(string_res)


# —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n —á–µ—Ä–µ–∑ —Ä–µ–∫—É—Ä—Å–∏—é

# f = int(input())


# def fac(n):
#     if n in [1]:
#         return 1
#     return fac(n-1) * n
# list_1 = []
# for i in range(1, 8):
#     list_1.append(fac(i))
# # print(list_1)

# def step(a, b):
#     if b == 1:
#         return a
#     return a  *  step(a, b - 1)

# a = 3
# b = 5
# print(step(a, b))


# #
# def multiply_recursive(a, b):
#     # –ë–∞–∑–æ–≤—ã–π —Å–ª—É—á–∞–π —Ä–µ–∫—É—Ä—Å–∏–∏: –µ—Å–ª–∏ b —Ä–∞–≤–Ω–æ 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1 (–ª—é–±–æ–µ —á–∏—Å–ª–æ, —É–º–Ω–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞ 0, —Ä–∞–≤–Ω–æ 0)
#     if b == 0:
#         return 1
#     # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —Å–ª—É—á–∞–π: —É–º–µ–Ω—å—à–∞–µ–º b –Ω–∞ 1 –∏ —É–º–Ω–æ–∂–∞–µ–º a –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
#     else:
#         return a  *  multiply_recursive(a, b - 1)

# # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:
# a = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ a: "))
# b = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ b: "))
# result = multiply_recursive(a, b)
# print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")


# a = 3
# b = 5

# def sum(a, b):
#     if b == 0:
#         return a
#     return 1 + sum(a-1,b)
# a = 3
# b = 5
# print(sum(a, b))


# –ó–∞–¥–∞—á–∞ No35. –†–µ—à–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–∞—Ö
# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–Ω–æ —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –ø—Ä–æ—Å—Ç—ã–º
# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –ü—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ - —ç—Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏–º–µ–µ—Ç 2 –¥–µ–ª–∏—Ç–µ–ª—è: 1 –∏ n(—Å–∞–º–æ —á–∏—Å–ª–æ)
# Input: 5 Output: yes
# 15 –º–∏–Ω—É—Ç


# def Simple (Turn, dew=2):
#     if dew*dew>=Turn:
#         return True
#     elif Turn%dew==0:
#         return False
#     else:
#         return Simple(Turn, dew+1)
# print(Simple(23))


# –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏.
# –ï—ë –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç a1 , —Ä–∞–∑–Ω–æ—Å—Ç—å d –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ n –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
# –§–æ—Ä–º—É–ª–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è n-–≥–æ —á–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏: an = a1 + (n-1) * d.



# a1 = 2
# d = 3
# n = 4

# –ù–∞ –≤—ã—Ö–æ–¥–µ:


# 2
# 5
# 8
# 11

# a1 = 2  # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
# d = 3  # –†–∞–∑–Ω–æ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
# n = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏

# # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
# progressive_list = []

# # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
# for i in range(n):
#     # –í—ã—á–∏—Å–ª—è–µ–º i-–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏
#     element = a1 + i  *  d
#     progressive_list.append(element)

# print(progressive_list)


# def print_operation_table(operation, num_rows=9, num_columns=9):
#     pritntedRows = 1
#     printedColumns = 1
#     if num_columns < 2 or num_rows < 2:
#         print('–û–®–ò–ë–ö–ê! –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 2!')
#         return
#     maxLongNum = len(str(operation(num_columns, num_rows)))
#     while pritntedRows <= num_rows:
#         while printedColumns <= num_columns:
#             if maxLongNum < len(str(operation(printedColumns, pritntedRows))):
#                 maxLongNum = len(str(operation(printedColumns, pritntedRows)))
#                 printedColumns += 1
#             pritntedRows += 1
#             printedColumns = 1

#     pritntedRows = 0
#     printedColumns = 0
#     while pritntedRows <= num_rows:
#         row = []
#         while printedColumns <= num_columns:
#             if pritntedRows == 0:
#                 row.append(('{0: >' + f'{maxLongNum}' + '}').format(printedColumns))
#             elif printedColumns == 0:
#                 row.append(('{0: >' + f'{maxLongNum}' + '}').format(pritntedRows))
#             else:
#                 if maxLongNum > 1:
#                     numbOperation = operation(printedColumns, pritntedRows)
#                     row.append(('{0: >' + f'{maxLongNum}' + '}').format(numbOperation))
#                 else:
#                     row.append(str(operation(printedColumns, pritntedRows)))
#             printedColumns += 1

#         print(*row, sep=' ')
#         pritntedRows += 1
#         printedColumns = 0




# print_operation_table(lambda x, y: x / y, 4, 4)

# data = [1, 2, 3, 5, 8, 15, 23, 38]
# res = list(filter(lambda x: x % 2 == 0, data))
# squared_res = list(map(lambda x: x ** 2, res))
# print(res,squared_res)


